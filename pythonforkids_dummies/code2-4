Copyright (c) 2015 Brendan Scott

Permission is granted, free of charge, to any person obtaining a copy
of this software (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

######################################################### 
## Page numbers correspond to the first edition of Python for Kids for Dummies
## ISBN 9781119093107
## If you are copying and pasting, 
## don't copy the >>>, the ... or the first space immediately 
## after either of them. 
## output is shown for some commands as well (it's not code
## so don't try copying it, but compare your output to what's here)
#########################################################


######## Page 36

print('Hello World!')

######## Page 38 (errors)
>>> pritn('Hello World!')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pritn' is not defined

>>> print('Hello World!)
  File "<stdin>", line 1
    print('Hello World!)
SyntaxError: EOL while scanning string literal


>>> print 'Hello World!')
  File "<stdin>", line 1
    print 'Hello World!')
                                                  
######## Page 39
>>> 'Hello World!'
'Hello World!'

######## Page 40 (errors)
>>> Hello World!
    File "<stdin>", line 1
        Hello World!
                      ^
SyntaxError: invalid syntax

>>> 'didn't'
    File "<stdin>", line 1
        'didn't'
                  ^
SyntaxError: invalid syntax

                                
######## Page 41 
>>> "didn't"
"didn't"
>>> '"I have a very eely hovercraft," he said.'
'"I have a very eely hovercraft," he said.'

>>> '''This is a literal made with triple single quotes.'''
'This is a literal made with triple single quotes.'
>>> """This is a literal made with triple double quotes [sic]."""
'This is a literal made with triple double quotes [sic].'

                                

######## Page 42
>>> my_message = 'Hello World!'
>>> my_second_message = 'This name is a little long. Ideally, try to keep the name short, but not too short.'


######## Page 43

>>> my_message = "Hello World!"
>>> print(my_message)
Hello World!

                                 
>>> my_message = 'Hello World!'
>>> my_second_message = 'This name is a little long. Ideally, try to keep the name short, but not too short.'

>>> my_message = my_second_message
>>> print(my_message)
This name is a little long. Ideally, try to keep the name short, but not too short.

######## Page 44

>>> my_message = 'A third message'
>>> print(my_message)
A third message
>>> print(my_second_message)
This name is a little long. Ideally, try to keep the name short, but not too short.
>>> my_message = 'Hello World!'


>>> a = 1
>>> b = 2
>>> print(a)
1
>>> print(b)
2
>>> print(a+b)
3
>>> print(b-a)
1
>>> print(a<b)
True
                                

######## Page 45

>>> a = a+1
>>> print(a)
2

>>> while True:
...       pass
...

######## Page 46 

>>> while True:
...         pass
...
^CTraceback (most recent call last):
    File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>>
                         
######## Page 47   

>>> a = 2
>>> while a < 10:
...        a = a+1
...        print(a)
...
3
4
5
6
7
8
9
10

######## Page 48

>>> while True:
...     pass
                            

######## Page 49
                         
>>> while True:
...
    File "<stdin>", line 2
      ^
IndentationError: expected an indented block
                            
######## Page 50          
>>> return = 4
  File "<stdin>", line 1
      return = 4
                
              ^
SyntaxError: invalid syntax


>>> my_message = 'Hello World!'
>>> while True:
...       print(my_message),
...
                           

                           
######## Page 51
                          
>>> message = 'Brendan is Awesome!!'
>>> while True:
...        print(message)
...


>>> range(3)
[0, 1, 2]
                           
                           
######## Page 52

>>> range(3,10)
[3, 4, 5, 6, 7, 8, 9]

>>> range(3,10,2)
[3, 5, 7, 9]


######## Page 53

>>> range(13,10,-1)
[13, 12, 11]

>>> for i in range(3):
...        print(i)
...
0
1
2
                           
######## Page 54
                            
>>> my_message = "Hello World!"
>>> for i in range(300):
...          print(my_message),
...
                           
     
######## Page 61

>>> raw_input()
I am typing a response. Python won't see this until I press Enter.
"I am typing a response. Python won't see this until I press Enter."


>>> raw_input("What is your guess?")
What is your guess?17
'17'
                           
                           
######## Page 62

>>> raw_input("What is your guess? ")
What is your guess? 17
'17'


>>> prompt = 'What is your guess? '
>>> raw_input(prompt)
What is your guess? 17
'17'


>>> prompt = 'What is your guess? '
>>> players_guess = raw_input(prompt)
What is your guess? 17
>>>
>>> players_guess
'17'
                          
                            
######## Page 63                           
>>> a = 1
>>> a == 1
True
>>> a = 2
>>> a == 1
False


>>> 1 == 1
True
>>> 1 == 2
False
>>> 1 = 2
    File "<stdin>", line 1
SyntaxError: can't assign to literal
                           
                           
######## Page 64-65
  Table 3-1                  Common Python Operators
Operator Name       Effect                    Examples
+         Plus      Add two numbers.          Add: >>> 1+1
                    Join two strings          2
                    together.                 Join: >>> 'a'+'b'
                                              'ab'
-         Minus     Subtract a number         >>> 1-1
                    from another.             0
                    Can't use for strings.
*         Times     Multiply two numbers.     Multiply: >>> 2*2
                    Make copies of a          4
                    string.                   Copy: >>> 'a'*2
                                              'aa'
/         Divide    Divide one number by      Ermagaaard! It's compli­
                    another.                  cated. See the next section.
                    Can't use for strings.
                    Python uses / because
                    there's no ÷ on your
                    keyboard.
%         Remainder Give the remainder        >>> 10%3
          (Modulo)  when dividing the left    1
                    number by the right
                    number.
                    Formatting operator for
                    strings. (See Project 8.)
**        Power     x**y means raise x to     >>> 3**2
                    the power of y.           9
                    Can't use for strings.
=        Assign­   Assign the value on        >>> a = 1
          ment      the right to the variable
                    on the left.
==       Equality  Is the left side equal to  >>> 1 == 1
                    the right side? True if    True
                    so; is False               >>> 'a' == 'a'
                    otherwise.
                                              True
!=       Not equal Is the left side not       >>> 1 != 1
                    equal to the right side? False
                    True if so; is False       >>> 1 != 2
                    otherwise.
                                              True
                                              >>> 'a' != 'A'
                                              True
>        Greater   Is the left side greater   >>> 2 > 1
          than      than the right side?       True
                    >= means greater than
                    or equal to
<        Less than Is the left side less than >>> 1 < 2
                    the right side?            True
                    <= means less than or
                    equal to
& (or    And       Are both left and right    >>> True & True
and)               true?                      True
                    Usually for complex        >>> True and False
                    conditions where you       False
                    want to do something
                                              >>> True & (1 == 2)
                    if everything is true:
                                              False
                    while im_hungry
                    and you_have_
                    food:
| (or or) Or          Is either left or right >>> True | False
                      true?                   True
                      Usually for complex     >>> True or False
                      conditions where you    True
                      want at least one thing
                                              >>> False | False
                      to be true:
                                              False
                      while im_bored
                                              >>> (1 == 1) |
                      or youre_bored:
                                              False
                                              True

                                              
                                              
>>> 3/2
1
>>> -3/2
-2
                            
                            
######## Page 67

>>> 3/2.
1.5


>>> a=2
>>> 3/a
1
>>> 3/float(a)
1.5
>>>


>>> prompt = 'What is your guess? '
>>> raw_input(prompt)
What is your guess? 17
'17'
                           
                           
######## Page 68

>>> a=1
>>> a+1
2
                          
                          
>>> players_guess = raw_input(prompt)
What is your guess? 17
>>> players_guess+1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: cannot concatenate 'str' and 'int' objects
                           
>>> players_guess
'17'
                        
                        
######## Page 69                    

>>> computers_number = 17


>>> computers_number == players_guess
False


>>> computers_number == int(players_guess)
True
                          
>>> int('1.0')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '1.0'

######## Page 70
                            
>>> int('1 fine day')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '1 fine day'
                           
>>> int('          17        ')
17


>>> if computers_number == int(players_guess):
...        print("Correct!")
...
Correct!
                            
                            
######## Page 71                              

>>> if 1==2:
...      print("Correct!")
...
>>> if 1==1:
...      print("Correct!")
...
Correct!
                              
                               
######## Page 72                         
                         
>>> if computers_number == int(players_guess)+1:
...      print('Correct!')
... else:
...      print('Wrong! Guess again')
...
Wrong! Guess again
                          
                           
######## Page 73                          
                          
>>> if computers_number == int(players_guess):
...       print('Correct!')
... elif computers_number > int(players_guess):
...       print('Too low')
... else:
...       print('Too high')
...
Correct!
                          
                           
>>> a = 3
>>> if a == 1:
...       print('a is 1!')
... elif a == 2:
...       print('a is 2!')
... elif a == 3:
...       print('a is 3!')
... else:
...       print("I don't know what a is")
...
a is 3!
       
       
######## Page 74                            
                            
>>>   computers_number = 16
>>>   if computers_number == int(players_guess):
...        print('Correct!')
...   elif computers_number > int(players_guess):
...        print('Too low')
...   else:
...        print('Too high')
...
Too   high
>>>   computers_number = 18
>>>   if computers_number == int(players_guess):
...        print('Correct!')
...   elif computers_number > int(players_guess):
...        print('Too low')
...   else:
...        print('Too high')
...
Too   low
                          
                           
######## Page 75-76              
              
>>> computers_number = 17
>>> prompt = 'What is your guess? '
>>> while True:
...        players_guess = raw_input(prompt)
...        if computers_number == int(players_guess):
...             print('Correct!')
...             break
...        elif computers_number > int(players_guess):
...             print('Too low')
...        else:
...             print('Too high')
...
What is your guess? 3
Too low
What is your guess? 93
Too high
What is your guess? 50
Too high
What is your guess? 30
Too high
What is your   guess? 20
Too high
What is your   guess? 10
Too low
What is your   guess? 19
Too high
What is your   guess? 16
Too low
What is your   guess? 18
Too high
What is your   guess? 17
Correct!


>>> break
  File "<stdin>", line 1
SyntaxError: 'break' outside loop

                            
######## Page 77                           
                           
>>> for i in range(3):
...      for j in range(3):
...           print(str(i)+", "+str(j))
...           if i == 1:
...               break
0,  0
0,  1
0,  2
1,  0
2,  0
2,  1
2,  2


>>> for i in range(3):
...      for j in range(3):
...           print(str(i)+", "+str(j))
...      if i == 1:
...           break
0, 0
0, 1
0,  2
1,  0
1,  1
1,  2

                            
>>> import random
>>> random.randint(1,100)
67
>>> help(random.randint)

                           
>>>   random.randint(1,100)
15
>>>   random.randint(1,100)
72
>>>   random.randint(1,100)
25
>>>   random.randint(1,100)
36

######## Page 79
>>> random.randint(1,100)
90
>>> random.randint(1,100)
81
>>> random.randint(1,100)
23
                            
                            
Python 2.7.3 (default, Apr 14 2012, 08:58:41) [GCC] on
            linux2
Type "help", "copyright", "credits" or "license" for more
            information.
>>> random.randint(1,100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'random' is not defined
                               
                               
######## Page 82                           
                           
>>> import random
>>>
>>> computers_number = random.randint(1,100)
>>> prompt = 'What is your guess? '
>>> while True:
...     players_guess = raw_input(prompt)
...     if computers_number == int(players_guess):
...         print('Correct!')
...         break
...     elif computers_number > int(players_guess):
...         print('Too low')
...     else:
...         print('Too high')
...
What is your guess? 24
Too low
What is your guess? 86
Too low
What is your guess? 94
Too low
What is your guess? 98
Too high
What is your guess? 96
Too high
What is your guess? 95
Correct!


Zen of Python
>>> import this


######## Page 97

                 
"""This is just a test file"""
print('Hello World! from the editor') # Use # for comments too!
""" You usually use hashes at the end of a line
rather than for a block comment like this one.
"""
###############################################################
# Nevertheless you can still use hashes for block comments
# Especially if you want to have a specific visual effect
###############################################################
print('See that the comments were ignored?') # even this one
                                          
                                          
######## Page 98
                            
"""This is a file to use when demonstrating
how to comment out a code block. """
# this section is holding us up for some reason
print('Imagine that instead of these print statements,')
print('there is instead some code which, if it runs')
print('will complicate the process of debugging some later piece')
print('of code. ')
# This is the later section which needs to be debugged
print('Hello World! ')
# imagine there's more program below as well


######## Page 101
                 
"""This is just a test file"""
DEBUG = True
print('Hello World! from the editor') # Use # for comments too!
""" You usually use hashes at the end of a line
rather than for a block comment like this one.
"""
###############################################################
# Nevertheless you can still use hashes for block comments
# Especially if you want to have a specific visual effect
###############################################################
if DEBUG:
    print('I think I need another print statement.')
    print('See that the comments were ignored?') # even this one
                            
                           
